# Generic .travis.yml file for running continuous integration on Travis-CI for
# any ROS package.
#
#
# This installs ROS on a clean Travis-CI virtual machine, creates a ROS
# workspace, resolves all listed dependencies, and sets environment variables
# (setup.bash). Then, it compiles the entire ROS workspace (ensuring there are
# no compilation errors), and runs all the tests. If any of the compilation/test
# phases fail, the build is marked as a failure.
#
# The build lifecycle on Travis.ci is something like this:
#    before_install
#    install
#    before_script
#    script
#    after_success or after_failure
#    after_script
#    OPTIONAL before_deploy
#    OPTIONAL deploy
#    OPTIONAL after_deploy

################################################################################

# Use ubuntu trusty (14.04) with sudo privileges.
dist: trusty
sudo: required
language:
  - generic
cache:
  - apt

# Configuration variables. All variables are global now, but this can be used to
# trigger a build matrix for different ROS distributions if desired.
env:
  global:
    - ROS_DISTRO=indigo
    - ROS_CI_DESKTOP="`lsb_release -cs`"  # e.g. [precise|trusty|...]
    - CI_SOURCE_PATH=$(pwd)
    - ROSINSTALL_FILE=$CI_SOURCE_PATH/dependencies.rosinstall
    - CATKIN_OPTIONS=$CI_SOURCE_PATH/catkin.options
    - ROS_PARALLEL_JOBS='-j8 -l6'
    # The next declaration is the encrypted COVERITY_SCAN_TOKEN, created
    # via the "travis encrypt" command using the project repo's public key
    - secure: "F0qnjx3az08XT+kxFdNqMFTxqmohc0tyxTCNMcufrG6+70mlwYnpE5eM/4nUNWzyKpAxfKzTc3gBtunbN2X/7okfy55cXA9SaA3LDXdxoluLxDmS6AfEMa3+yF4jvneAtIR4UCvPcZNDCBJXJmWQ/JYtxHVFp2wweKNzPEodVTPZm0uCkB+hvaU5d1Ono6QTNFmk+YhvaMeCt0TbULJBjOxAYYv8as5x/lI1bMwy54Jm8n/p/kiz5WSUXG3aRZXUW27IT76/kW+KpK1xyAEs/Hh0Kt1prYGYOwD8reuxng63yDG//SA27byPWrMUdZ2Hl2AZw3OcT+FvEOifK7axrIvTLtBphKY1b+mLIUYH8d3r5PvqmqtG5Bayjeqh3126xp5rpXPZzZ9qFbHkOO91ptirpPH7hNzH0tdlIDf1oRGvfyD/7eFPsOJgk8h7wmnHQGJ16NGA+JNrODpl3TLNKFzZ1ESndq32Aqt1fjg8xLpV5udZ/LTgoWNu+WepF1li3Uditzj0NZnGDCH2jEonNPo2hClV/acY6rx32E1YZSS6y0jl5SZqmQyb7ZE8eWVa42iwyivDYx0oXoD378Cxa8dgR1vK8f4r6f+3U7sclDtNM8Mg4xFrtIhd2MRuF1JJk/fBjLG4Zm1rpEKhjez8J/TNAQrMxp+ZE2pif0YInqo="

################################################################################

# Install system dependencies, namely a very barebones ROS setup.
before_install:
  - sudo sh -c "echo \"deb http://packages.ros.org/ros/ubuntu $ROS_CI_DESKTOP main\" > /etc/apt/sources.list.d/ros-latest.list"
  - wget http://packages.ros.org/ros.key -O - | sudo apt-key add -
  - sudo apt-get update -qq
  - sudo apt-get install -y python-catkin-pkg python-rosdep python-wstool ros-$ROS_DISTRO-catkin
  - sudo apt-get install ros-indigo-opencv3 ros-indigo-camera-info-manager ros-indigo-cv-bridge libeigen3-dev ros-indigo-mavros
  - source /opt/ros/$ROS_DISTRO/setup.bash
  # Prepare rosdep to install dependencies.
  - sudo rosdep init
  - rosdep update
  
  - echo -n | openssl s_client -connect scan.coverity.com:443 | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' | sudo tee -a /etc/ssl/certs/ca-

# Create a catkin workspace with the package under integration.
install:
  - mkdir -p ~/catkin_ws/src
  - cd ~/catkin_ws/src
  - catkin_init_workspace
  # Create the devel/setup.bash (run catkin_make with an empty workspace) and
  # source it to set the path variables.
  - cd ~/catkin_ws
  - catkin_make
  - source devel/setup.bash
  # Add the package under integration to the workspace using a symlink.
  - cd ~/catkin_ws/src
  - ln -s $CI_SOURCE_PATH .

# Install all dependencies, using wstool first and rosdep second.
# wstool looks for a ROSINSTALL_FILE defined in the environment variables.
before_script:
  # source dependencies: install using wstool.
  - cd ~/catkin_ws/src
  - wstool init
  - if [[ -f $ROSINSTALL_FILE ]] ; then wstool merge $ROSINSTALL_FILE ; fi
  - wstool up
  # package depdencies: install using rosdep.
  - cd ~/catkin_ws
  - rosdep install -y --from-paths src --ignore-src --rosdistro $ROS_DISTRO


# Do static code analysis with coverity
addons:
  coverity_scan:
    project:
      name: "UMD-AMAV/TerpCopter"
      description: "UMD's Autopilot Software for AMAV Competition"
    notification_email: lkumar93@umd.edu
    build_command_prepend: "cd ~/catkin_ws && rosdep install -y --from-paths src --ignore-src --rosdistro $ROS_DISTRO"
    build_command:   "catkin_make && cp -r build src/TerpCopter && cd src/TerpCopter"
    branch_pattern: master

# Compile and test (mark the build as failed if any step fails). If the
# CATKIN_OPTIONS file exists, use it as an argument to catkin_make, for example
# to blacklist certain packages.
#
# NOTE on testing: `catkin_make run_tests` will show the output of the tests
# (gtest, nosetest, etc..) but always returns 0 (success) even if a test
# fails. Running `catkin_test_results` aggregates all the results and returns
# non-zero when a test fails (which notifies Travis the build failed).
script:
  - source /opt/ros/$ROS_DISTRO/setup.bash
  - cd ~/catkin_ws
  - catkin_make $( [ -f $CATKIN_OPTIONS ] && cat $CATKIN_OPTIONS )
  # Run the tests, ensuring the path is set correctly.
  - source devel/setup.bash
  - catkin_make run_tests && catkin_test_results

# Send notifications to terpcopter-software channel in AMAV2017 slack group
notifications:
  slack: amav2017:Iuhf0YIWdQVh0NKrEXsJMFeg

